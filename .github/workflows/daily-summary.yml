name: 📅 Daily Activity Summary

on:
  schedule:
    # Run daily at 9 AM UTC (adjust for your timezone)
    - cron: '0 9 * * *'
  
  workflow_dispatch:
    inputs:
      days_back:
        description: 'Number of days to include in summary'
        required: false
        type: number
        default: 1

jobs:
  summary:
    name: Generate Daily Summary
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: 📥 Checkout Repositories
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/sprintx
          token: ${{ secrets.VAULT_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          path: vault
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📊 Generate Summary
        id: generate
        run: |
          cat > daily_summary.py << 'EOF'
          import os
          import json
          from datetime import datetime, timedelta
          from pathlib import Path
          
          def generate_summary(vault_path, days_back=1):
              summary = {
                  "date": datetime.now().strftime("%Y-%m-%d"),
                  "projects_updated": 0,
                  "total_changes": 0,
                  "most_active": [],
                  "recent_files": []
              }
              
              # Check state file
              state_file = Path(vault_path) / ".project_monitor_state.json"
              if state_file.exists():
                  with open(state_file) as f:
                      state = json.load(f)
                  
                  cutoff = datetime.now() - timedelta(days=days_back)
                  cutoff_timestamp = cutoff.timestamp()
                  
                  for project, data in state.items():
                      if data.get("last_updated", 0) > cutoff_timestamp:
                          summary["projects_updated"] += 1
                          
                          # Count recent modifications
                          recent_count = 0
                          for mod in data.get("modifications", []):
                              if mod.get("timestamp", 0) > cutoff_timestamp:
                                  recent_count += 1
                                  summary["recent_files"].append({
                                      "project": project,
                                      "file": mod.get("path", "unknown"),
                                      "time": mod.get("datetime", "")
                                  })
                          
                          if recent_count > 0:
                              summary["most_active"].append({
                                  "project": project,
                                  "changes": recent_count
                              })
                              summary["total_changes"] += recent_count
              
              # Sort most active projects
              summary["most_active"].sort(key=lambda x: x["changes"], reverse=True)
              summary["most_active"] = summary["most_active"][:5]  # Top 5
              
              # Sort recent files by time
              summary["recent_files"].sort(key=lambda x: x["time"], reverse=True)
              summary["recent_files"] = summary["recent_files"][:20]  # Last 20
              
              return summary
          
          # Generate summary
          days = int(os.environ.get("DAYS_BACK", "1"))
          summary = generate_summary("vault", days)
          
          # Output for GitHub
          print(json.dumps(summary, indent=2))
          
          # Create markdown report
          report = f"""# 📊 Daily Activity Summary - {summary['date']}
          
          ## Overview
          - **Projects Updated**: {summary['projects_updated']}
          - **Total Changes**: {summary['total_changes']}
          - **Period**: Last {days} day(s)
          
          ## Most Active Projects
          """
          
          for proj in summary["most_active"]:
              report += f"- **{proj['project']}**: {proj['changes']} changes\n"
          
          report += "\n## Recent File Changes\n"
          report += "| Time | Project | File |\n"
          report += "|------|---------|------|\n"
          
          for file in summary["recent_files"][:10]:
              report += f"| {file['time']} | {file['project']} | `{file['file'][:50]}` |\n"
          
          report += "\n---\n*Generated by GitHub Actions*"
          
          # Save report
          with open("daily_report.md", "w") as f:
              f.write(report)
          
          # Set outputs
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"projects_updated={summary['projects_updated']}\n")
              f.write(f"total_changes={summary['total_changes']}\n")
          EOF
          
          python daily_summary.py
          
          # Save summary
          cp daily_report.md vault/DAILY_SUMMARY_$(date +%Y%m%d).md
      
      - name: 💾 Save Summary to Vault
        run: |
          cd vault
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Commit if changes
          if [ -n "$(git status --porcelain)" ]; then
            git add DAILY_SUMMARY_*.md
            git commit -m "📅 Daily activity summary - $(date +%Y-%m-%d)"
            git push origin main
          fi
      
      - name: 📨 Create Summary Issue
        if: steps.generate.outputs.projects_updated > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('daily_report.md', 'utf8');
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: 'sprintx',
              title: `📅 Daily Activity Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['daily-summary', 'automation']
            });
            
            console.log(`Created issue #${issue.data.number}`);
      
      - name: 📊 Job Summary
        if: always()
        run: |
          echo "## 📅 Daily Summary Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "daily_report.md" ]; then
            cat daily_report.md >> $GITHUB_STEP_SUMMARY
          else
            echo "No report generated" >> $GITHUB_STEP_SUMMARY
          fi